import React from 'react';\nimport { FaExclamationTriangle, FaCheckCircle, FaInfoCircle, FaSatellite } from 'react-icons/fa';\nimport { Tooltip } from 'react-tooltip';\nimport DroneDetail from './DroneDetail';\nimport DroneCriticalCommands from './DroneCriticalCommands';\nimport { getFlightModeTitle, getSystemStatusTitle, isSafeMode, isReady, getFlightModeCategory } from '../utilities/flightModeUtils';\nimport { getDroneShowStateName, isMissionReady, isMissionExecuting } from '../constants/droneStates';\nimport { getFriendlyMissionName, getMissionStatusClass } from '../utilities/missionUtils';\nimport '../styles/DroneWidget.css';\n\n/**\n * Professional Drone Show Swarm Widget\n * Optimized for maximum operational information at a glance\n */\nconst DroneWidget = ({\n  drone,\n  toggleDroneDetails,\n  isExpanded,\n  setSelectedDrone,\n}) => {\n  const currentTimeInMs = Date.now();\n  const isStale = currentTimeInMs - (drone.Timestamp || 0) > 5000;\n\n  // Flight mode and system status\n  const flightModeValue = drone.Flight_Mode || 0;\n  const flightModeTitle = getFlightModeTitle(flightModeValue);\n  const flightModeCategory = getFlightModeCategory(flightModeValue);\n  const systemStatusName = getSystemStatusTitle(drone.System_Status || 0);\n\n  // Arming and readiness status\n  const isArmed = drone.Is_Armed || false;\n  const isReadyToArm = drone.Is_Ready_To_Arm || false;\n  const isInSafeMode = isSafeMode(drone.Flight_Mode || 0);\n  const isSystemReady = isReady(drone.System_Status || 0);\n\n  // Mission states\n  const missionReady = isMissionReady(drone.State);\n  const missionExecuting = isMissionExecuting(drone.State);\n  const missionStateName = getDroneShowStateName(drone.State);\n  const friendlyMissionName = getFriendlyMissionName(drone.lastMission);\n  const missionStatusClass = getMissionStatusClass(drone.lastMission);\n\n  // GPS status processing\n  const gpsFixType = drone.Gps_Fix_Type || 0;\n  const satellitesVisible = drone.Satellites_Visible || 0;\n  \n  const getGpsFixName = (fixType) => {\n    const fixTypes = {\n      0: 'No GPS',\n      1: 'No Fix',\n      2: '2D Fix',\n      3: '3D Fix',\n      4: 'DGPS',\n      5: 'RTK Float',\n      6: 'RTK Fixed'\n    };\n    return fixTypes[fixType] || 'Unknown';\n  };\n\n  const getGpsFixClass = (fixType) => {\n    if (fixType === 0 || fixType === 1) return 'no-fix';\n    if (fixType === 2) return 'fix-2d';\n    if (fixType === 3) return 'fix-3d';\n    if (fixType === 4) return 'dgps';\n    if (fixType >= 5) return 'rtk';\n    return 'no-fix';\n  };\n\n  // Status assessment functions\n  const getBatteryStatus = (voltage) => {\n    if (voltage === undefined) return { class: '', text: 'N/A' };\n    if (voltage >= 15.5) return { class: 'good', text: `${voltage.toFixed(1)}V` };\n    if (voltage >= 14.5) return { class: 'warning', text: `${voltage.toFixed(1)}V` };\n    return { class: 'critical', text: `${voltage.toFixed(1)}V` };\n  };\n\n  const getGpsQualityStatus = (hdop, vdop) => {\n    if (hdop === undefined || vdop === undefined) return { class: '', text: 'N/A' };\n    const avgDop = (hdop + vdop) / 2;\n    if (avgDop <= 1.0) return { class: 'good', text: `${hdop.toFixed(1)}/${vdop.toFixed(1)}` };\n    if (avgDop <= 2.0) return { class: 'warning', text: `${hdop.toFixed(1)}/${vdop.toFixed(1)}` };\n    return { class: 'critical', text: `${hdop.toFixed(1)}/${vdop.toFixed(1)}` };\n  };\n\n  const getAltitudeDisplay = (alt) => {\n    if (alt === undefined) return 'N/A';\n    return `${alt.toFixed(1)}m`;\n  };\n\n  // Position ID validation\n  const posId = drone.Pos_ID ?? 'N/A';\n  const detectedPosRaw = drone.Detected_Pos_ID;\n  const detectedPosId = detectedPosRaw === undefined ? 'N/A' : String(detectedPosRaw);\n  const isAutoDetectZero = detectedPosId === '0';\n  const posMismatch = posId !== 'N/A' && detectedPosId !== 'N/A' && !isAutoDetectZero && posId !== detectedPosId;\n\n  const handlePositionConfigClick = (ev) => {\n    ev.stopPropagation();\n    window.location.href = '/mission-config';\n  };\n\n  // Last update time formatting\n  const formatLastUpdate = (timestamp) => {\n    if (!timestamp) return 'Never';\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffSeconds = Math.floor((now - date) / 1000);\n    \n    if (diffSeconds < 10) return 'Just now';\n    if (diffSeconds < 60) return `${diffSeconds}s ago`;\n    if (diffSeconds < 3600) return `${Math.floor(diffSeconds / 60)}m ago`;\n    return date.toLocaleTimeString();\n  };\n\n  const batteryStatus = getBatteryStatus(drone.Battery_Voltage);\n  const gpsQuality = getGpsQualityStatus(drone.Hdop, drone.Vdop);\n\n  return (\n    <div\n      className={`drone-widget ${\n        isReadyToArm ? 'ready-to-arm' : 'not-ready-to-arm'\n      } ${isArmed ? 'armed' : 'disarmed'} ${\n        missionReady ? 'mission-ready' : ''\n      } ${missionExecuting ? 'mission-executing' : ''} ${\n        isExpanded ? 'expanded' : ''\n      }`}\n    >\n      {/* Header */}\n      <h3 onClick={() => toggleDroneDetails(drone)}>\n        <div className=\"drone-header\">\n          <span className={`status-indicator ${isStale ? 'stale' : 'active'}`} />\n          <span>Drone {drone.hw_ID || 'Unknown'}</span>\n        </div>\n      </h3>\n\n      {/* Critical Status Badges */}\n      <div className=\"critical-status\">\n        <span className={`status-badge ${isArmed ? 'armed' : 'disarmed'}`}>\n          {isArmed ? 'ARMED' : 'DISARMED'}\n        </span>\n        <span className={`status-badge ${isReadyToArm ? 'ready' : 'not-ready'}`}>\n          {isReadyToArm ? 'READY' : 'NOT READY'}\n        </span>\n      </div>\n\n      {/* Position ID Section */}\n      <div className=\"position-section\">\n        <div className=\"position-info\">\n          <strong>Pos ID:</strong> {posId}\n          {(() => {\n            if (isAutoDetectZero) {\n              return (\n                <>\n                  <FaInfoCircle\n                    className=\"posid-info-icon\"\n                    data-tooltip-id={`posid-tooltip-info-${drone.hw_ID}`}\n                    data-tooltip-content=\"Auto-detected pos_id=0 (not available yet).\"\n                  />\n                  <Tooltip id={`posid-tooltip-info-${drone.hw_ID}`} place=\"top\" effect=\"solid\" />\n                </>\n              );\n            }\n            if (posMismatch) {\n              return (\n                <>\n                  <FaExclamationTriangle\n                    className=\"posid-warning-icon\"\n                    data-tooltip-id={`posid-tooltip-${drone.hw_ID}`}\n                    data-tooltip-content={`Mismatch: Auto-detected = ${detectedPosId}. Click to fix.`}\n                    onClick={handlePositionConfigClick}\n                    style={{ cursor: 'pointer' }}\n                  />\n                  <Tooltip id={`posid-tooltip-${drone.hw_ID}`} place=\"top\" effect=\"solid\" />\n                </>\n              );\n            }\n            if (posId !== 'N/A' && detectedPosId !== 'N/A') {\n              return (\n                <>\n                  <FaCheckCircle\n                    className=\"posid-match-icon\"\n                    data-tooltip-id={`posid-tooltip-match-${drone.hw_ID}`}\n                    data-tooltip-content={`Auto-detected matches config (${detectedPosId}).`}\n                  />\n                  <Tooltip id={`posid-tooltip-match-${drone.hw_ID}`} place=\"top\" effect=\"solid\" />\n                </>\n              );\n            }\n            return null;\n          })()}\n        </div>\n      </div>\n\n      {/* Main Data Grid */}\n      <div className=\"drone-data-grid\">\n        {/* Flight Mode */}\n        <div className=\"data-item full-width\">\n          <span className=\"data-label\">Flight Mode</span>\n          <span className={`mode-badge ${flightModeCategory}`}>\n            {flightModeTitle}\n          </span>\n        </div>\n\n        {/* Mission */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">Mission</span>\n          <span className={`mission-badge ${missionStatusClass}`}>\n            {friendlyMissionName}\n          </span>\n        </div>\n\n        {/* Mission State */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">State</span>\n          <span className={`mission-state-badge ${\n            missionExecuting ? 'executing' : missionReady ? 'ready' : 'idle'\n          }`}>\n            {missionStateName}\n          </span>\n        </div>\n\n        {/* Altitude */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">Altitude</span>\n          <span className=\"data-value\">\n            {getAltitudeDisplay(drone.Position_Alt)}\n          </span>\n        </div>\n\n        {/* Battery */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">Battery</span>\n          <span className={`data-value ${batteryStatus.class}`}>\n            {batteryStatus.text}\n          </span>\n        </div>\n\n        {/* GPS Status */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">GPS Fix</span>\n          <div className=\"gps-status\">\n            <span className={`gps-fix-indicator ${getGpsFixClass(gpsFixType)}`}></span>\n            <span className=\"data-value\">{getGpsFixName(gpsFixType)}</span>\n          </div>\n        </div>\n\n        {/* GPS Quality */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">GPS Quality</span>\n          <span className={`data-value ${gpsQuality.class}`}>\n            {gpsQuality.text}\n          </span>\n        </div>\n\n        {/* Satellites */}\n        <div className=\"data-item\">\n          <span className=\"data-label\">Satellites</span>\n          <div className=\"gps-status\">\n            <FaSatellite style={{ fontSize: '0.7em', color: '#6b7280' }} />\n            <span className=\"data-value\">{satellitesVisible}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Last Update Indicator */}\n      <div className=\"last-update\">\n        Last: {formatLastUpdate(drone.Timestamp)}\n      </div>\n\n      {/* Action Commands */}\n      <div className=\"drone-critical-commands-section\">\n        <DroneCriticalCommands droneId={drone.hw_ID} />\n      </div>\n\n      {/* Expanded Details */}\n      {isExpanded && (\n        <div className=\"details-content\">\n          <DroneDetail drone={drone} isAccordionView />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DroneWidget;"